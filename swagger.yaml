openapi: 3.0.3
info:
  title: Bookify API
  description: |
    Welcome to the official API documentation for Bookify! This guide provides everything you need to integrate our comprehensive appointment booking and resource management system into your applications.

    ## Overview
    Bookify provides a powerful, flexible API for managing:
    - **Resources**: The people (employees) and things (assets like rooms or equipment) that can be booked.
    - **Services**: The specific offerings that your customers can book, each with its own rules, duration, and price.
    - **Availability**: Real-time calculation of open slots, considering all schedules and existing appointments.
    - **Bookings**: The end-to-end lifecycle of an appointment, from creation to completion.

    This API is designed for developers building custom booking experiences, integrating scheduling into existing workflows, or automating resource management.

    ## Authentication
    All authenticated API requests require an **API Key**. You must include your key in the `Authorization` header of every request.

    **Example Request Header:**
    ```
    Authorization: sk-live-org_abc123-user_def456-1234567890abcdef
    ```
    **Important**: Do not add any prefix like "Bearer" to your key. Use the key directly as provided.

    To get your API key, sign in to your Bookify portal and generate a new key in the developer settings section. Keep your keys secure and do not expose them in client-side code.

    ## Quick Start Guide
    Follow these steps to make your first booking.

    ### 1. Get your API Key
    Log into your Bookify account and navigate to the "Developers" or "API" section to create and copy your API key.

    ### 2. Find a Service to Book
    First, you need the ID of the service you want to book. You can get a list of all your available services.
    ```bash
    curl -X GET "[https://bookify-api.atlasprods.com/api/services](https://bookify-api.atlasprods.com/api/services)" \
      -H "Authorization: YOUR_API_KEY"
    ```
    *(Copy the `id` from one of the services in the response for the next steps.)*

    ### 3. Check for Available Slots
    Next, check when that service is available. Let's look for open slots for a specific day.
    ```bash
    curl -X POST "[https://bookify-api.atlasprods.com/api/availability](https://bookify-api.atlasprods.com/api/availability)" \
      -H "Authorization: YOUR_API_KEY" \
      -H "Content-Type: application/json" \
      -d '{
        "serviceId": "PASTE_SERVICE_ID_HERE",
        "startTime": "2025-10-20T09:00:00Z",
        "endTime": "2025-10-20T17:00:00Z"
      }'
    ```

    ### 4. Create the Booking
    Once you've found an open slot from the previous step, you can create the booking.
    ```bash
    curl -X POST "[https://bookify-api.atlasprods.com/api/bookings](https://bookify-api.atlasprods.com/api/bookings)" \
      -H "Authorization: YOUR_API_KEY" \
      -H "Content-Type: application/json" \
      -d '{
        "serviceId": "PASTE_SERVICE_ID_HERE",
        "customerData": {
          "name": "Jane Doe",
          "email": "jane.doe@example.com",
          "phone": "+15551234567"
        },
        "startTime": "2025-10-20T14:00:00Z",
        "endTime": "2025-10-20T15:00:00Z",
        "note": "This is a test booking from the API."
      }'
    ```
    Success! You've just created your first booking using the Bookify API.

    ## Rate Limits
    To ensure optimal performance for all users, the API enforces the following rate limits:
    - **100 requests per minute** per API key.
    - **1,000 requests per hour** per organization.
    Exceeding these limits will result in a `429 Too Many Requests` error.

    ## Booking Status Workflow
    Bookings move through a clear lifecycle. Understanding these statuses is key to managing appointments.

    ```
    CREATE → CONFIRMED (default)
              ↓
           COMPLETED

    CREATE → PENDING → CONFIRMED → COMPLETED
              ↓          ↓
           CANCELLED  CANCELLED

    Any Status → FAILED (on processing errors)
    ```

    - **PENDING**: The booking has been requested but requires manual approval before it is confirmed.
    - **CONFIRMED**: The booking is active and the time slot is reserved.
    - **CANCELLED**: The booking was cancelled by either a user or an admin. The time slot is now free.
    - **COMPLETED**: The appointment time has passed and the booking is now part of the historical record.
    - **FAILED**: An error occurred during the booking process.
  version: 1.0.0
  contact:
    name: Bookify Support
    email: hello@atlasprods.com
  license:
    name: MIT
servers:
  - url: https://bookify-api.atlasprods.com/api
    description: Production Environment
  - url: http://localhost:3000/api
    description: Development Environment
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Your personal API key for programmatic access. To get your key, sign in to your Bookify portal and generate one from the developer settings.

        **Example**: `sk-live-org_abc123-user_def456-1234567890abcdef`

        **Important**: Provide the key directly in the `Authorization` header. Do NOT include any prefix like "Bearer".
  schemas:
    AvailabilityRequest:
      type: object
      required:
        - serviceId
        - startTime
        - endTime
      properties:
        serviceId:
          type: string
          format: uuid
          description: |
            Specify the unique identifier of the service for which you want to check availability. The system will intelligently check the schedules of all resources (people and assets) assigned to this service.
          example: "550e8400-e29b-41d4-a716-446655440003"
        startTime:
          type: string
          format: date-time
          description: |
            Define the beginning of the time window you want to search, formatted as an ISO 8601 string. This value must be in the future.
          example: "2025-10-20T09:00:00Z"
        endTime:
          type: string
          format: date-time
          description: |
            Define the end of the time window you want to search, formatted as an ISO 8601 string. This value must be after the `startTime`.
          example: "2025-10-20T17:00:00Z"
      example:
        serviceId: "550e8400-e29b-41d4-a716-446655440003"
        startTime: "2025-10-20T09:00:00Z"
        endTime: "2025-10-20T17:00:00Z"
    PublicAvailabilityRequest:
      type: object
      required:
        - serviceId
        - startTime
        - endTime
      properties:
        serviceId:
          type: string
          description: The unique identifier for the service you want to check.
        startTime:
          type: string
          format: date-time
          description: The start of the time range to search for available slots.
        endTime:
          type: string
          format: date-time
          description: The end of the time range to search for available slots.
    AvailabilitySlot:
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: The exact start time of an available appointment slot.
          example: "2025-10-20T14:00:00Z"
        end:
          type: string
          format: date-time
          description: The exact end time of an available appointment slot.
          example: "2025-10-20T15:00:00Z"
        resources:
          type: array
          description: A list of the specific resources (employees or assets) that are available during this time slot.
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: The unique identifier of the available resource.
                example: "550e8400-e29b-41d4-a716-446655440001"
              name:
                type: string
                description: The display name of the resource.
                example: "Dr. Sarah Johnson"
              timezone:
                type: string
                description: The IANA timezone of the resource (e.g., "America/New_York").
                example: "America/New_York"
      example:
        start: "2025-10-20T14:00:00Z"
        end: "2025-10-20T15:00:00Z"
        resources:
          - id: "550e8400-e29b-41d4-a716-446655440001"
            name: "Dr. Sarah Johnson"
            timezone: "America/New_York"
    AvailabilityResponse:
      type: object
      properties:
        data:
          type: array
          description: A list of available time slots that match your query. If this array is empty, no slots were found in the requested time range.
          items:
            $ref: '#/components/schemas/AvailabilitySlot'
      example:
        data:
          - start: "2025-10-20T09:00:00Z"
            end: "2025-10-20T10:00:00Z"
            resources:
              - id: "550e8400-e29b-41d4-a716-446655440001"
                name: "Dr. Sarah Johnson"
                timezone: "America/New_York"
          - start: "2025-10-20T14:00:00Z"
            end: "2025-10-20T15:00:00Z"
            resources:
              - id: "550e8400-e29b-41d4-a716-446655440001"
                name: "Dr. Sarah Johnson"
                timezone: "America/New_York"
    PublicAvailabilityResponse:
      type: object
      properties:
        availableSlots:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilitySlot'
        orgId:
          type: string
    CreateBookingRequest:
      type: object
      required:
        - customerData
        - startTime
        - endTime
      properties:
        resourceIds:
          type: array
          items:
            type: string
            format: uuid
          description: |
            Use this field to book one or more specific resources directly. Provide an array of resource UUIDs. This is useful for internal booking or when the customer explicitly chooses a person or asset. **You must provide either `resourceIds` or `serviceId`, but not both.**
          example: ["550e8400-e29b-41d4-a716-446655440001", "550e8400-e29b-41d4-a716-446655440002"]
        serviceId:
          type: string
          format: uuid
          description: |
            Use this field to book based on a service. The system will automatically find and assign an available resource that is linked to the service. This is the most common method for customer-facing booking flows. **You must provide either `serviceId` or `resourceIds`, but not both.**
          example: "550e8400-e29b-41d4-a716-446655440003"
        customerData:
          type: object
          description: |
            Provide the customer's information in this object. The required fields (e.g., name, email, phone) are defined within the service settings. Ensure you provide all fields marked as required for the specific service you are booking.
          additionalProperties: true
          example:
            name: "John Smith"
            email: "john.smith@example.com"
            phone: "+1-555-0123"
            company: "Acme Corp"
        title:
          type: string
          description: Provide an optional custom title for the booking, which can override the default service name.
          example: "Quarterly Business Review"
        location:
          $ref: '#/components/schemas/Location'
        startTime:
          type: string
          format: date-time
          description: |
            The exact start time for the booking in ISO 8601 format. This time must correspond to the start of an available slot.
          example: "2025-10-20T14:00:00Z"
        endTime:
          type: string
          format: date-time
          description: |
            The exact end time for the booking in ISO 8601 format. The duration between start and end must match the service's configured length.
          example: "2025-10-20T15:00:00Z"
        note:
          type: string
          description: Add any special instructions or notes from the customer for this booking.
          example: "Please prepare the conference room with a projector."
        metadata:
          type: object
          additionalProperties: true
          description: Store any custom key-value data. This is useful for tracking the booking source, campaign IDs, or other integration-specific information.
          example:
            source: "website-widget"
            campaign: "fall_promo_2025"
            referrer: "google_ads"
      example:
        serviceId: "550e8400-e29b-41d4-a716-446655440003"
        customerData:
          name: "John Smith"
          email: "john.smith@example.com"
          phone: "+1-555-0123"
        startTime: "2025-10-20T14:00:00Z"
        endTime: "2025-10-20T15:00:00Z"
        title: "Quarterly Business Review"
        note: "Please prepare the conference room with a projector."
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the booking.
          example: "550e8400-e29b-41d4-a716-446655440010"
        orgId:
          type: string
          format: uuid
          description: The organization this booking belongs to.
          example: "550e8400-e29b-41d4-a716-446655440000"
        resourceIds:
          type: array
          items:
            type: string
            format: uuid
          description: A list of unique identifiers for the resources assigned to this booking.
          example: ["550e8400-e29b-41d4-a716-446655440001"]
        serviceId:
          type: string
          format: uuid
          description: The unique identifier of the service this booking is for.
          example: "550e8400-e29b-41d4-a716-446655440003"
        customerData:
          type: object
          additionalProperties: true
          description: The information collected from the customer during the booking process.
          example:
            name: "John Smith"
            email: "john.smith@example.com"
            phone: "+1-555-0123"
        title:
          type: string
          description: The title of the booking.
          example: "Quarterly Business Review"
        location:
          $ref: '#/components/schemas/Location'
        startTime:
          type: string
          format: date-time
          description: The scheduled start time of the booking.
          example: "2025-10-20T14:00:00Z"
        endTime:
          type: string
          format: date-time
          description: The scheduled end time of the booking.
          example: "2025-10-20T15:00:00Z"
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - CANCELLED
            - COMPLETED
            - FAILED
          description: |
            The current status of the booking.
            - `PENDING`: Awaiting confirmation.
            - `CONFIRMED`: Actively scheduled.
            - `CANCELLED`: No longer active.
            - `COMPLETED`: The appointment has passed.
            - `FAILED`: An error occurred during processing.
          example: "CONFIRMED"
        createdAt:
          type: string
          format: date-time
          description: The timestamp of when the booking was created.
          example: "2025-10-10T09:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp of the last update to the booking.
          example: "2025-10-10T09:30:00Z"
        note:
          type: string
          description: Any additional notes associated with the booking.
          example: "Please prepare the conference room with a projector."
        metadata:
          type: object
          additionalProperties: true
          description: Custom key-value data associated with the booking.
          example:
            source: "website"
            campaign: "fall_promo_2025"
      example:
        id: "550e8400-e29b-41d4-a716-446655440010"
        orgId: "550e8400-e29b-41d4-a716-446655440000"
        resourceIds: ["550e8400-e29b-41d4-a716-446655440001"]
        serviceId: "550e8400-e29b-41d4-a716-446655440003"
        customerData:
          name: "John Smith"
          email: "john.smith@example.com"
          phone: "+1-555-0123"
        title: "Quarterly Business Review"
        startTime: "2025-10-20T14:00:00Z"
        endTime: "2025-10-20T15:00:00Z"
        status: "CONFIRMED"
        createdAt: "2025-10-10T09:30:00Z"
        updatedAt: "2025-10-10T09:30:00Z"
        note: "Please prepare the conference room with a projector."
    EmployeeResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        resourceName:
          type: string
        orgId:
          type: string
        timezone:
          type: string
        createdAt:
          type: string
          format: date-time
        displayPictureUri:
          type: string
        notificationsEnabled:
          type: boolean
        bufferTime:
          type: integer
        isActive:
          type: boolean
        status:
          type: string
        note:
          type: string
        specificAvailability:
          type: array
          items:
            $ref: '#/components/schemas/SpecificAvailabilityConstraint'
        regularAvailability:
          type: array
          items:
            $ref: '#/components/schemas/RegularAvailabilityConstraint'
        email:
          type: string
        phone:
          type: string
        onboardingPreference:
          type: string
        calendarSync:
          type: string
        role:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        notificationType:
          type: string
    AssetResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        resourceName:
          type: string
        orgId:
          type: string
        timezone:
          type: string
        createdAt:
          type: string
          format: date-time
        displayPictureUri:
          type: string
        notificationsEnabled:
          type: boolean
        bufferTime:
          type: integer
        isActive:
          type: boolean
        status:
          type: string
        note:
          type: string
        specificAvailability:
          type: array
          items:
            $ref: '#/components/schemas/SpecificAvailabilityConstraint'
        regularAvailability:
          type: array
          items:
            $ref: '#/components/schemas/RegularAvailabilityConstraint'
        assetType:
          type: string
        idsToNotify:
          type: array
          items:
            type: string
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the service.
          example: "550e8400-e29b-41d4-a716-446655440003"
        name:
          type: string
          description: The public name of the service.
          example: "60-Minute Business Consultation"
        orgId:
          type: string
          format: uuid
          description: The organization this service belongs to.
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: ["active", "inactive"]
          description: The current status of the service. Only 'active' services can be booked.
          example: "active"
        timezone:
          type: string
          description: The default timezone for this service, which overrides the organization's default.
          example: "America/New_York"
        availability:
          type: object
          description: The core rules defining how this service can be booked.
          properties:
            daysIntoFuture:
              type: integer
              description: How many days in advance customers can book this service.
              example: 30
            lengthMinutes:
              type: integer
              description: The duration of a single appointment for this service in minutes.
              example: 60
            bufferMinutes:
              type: integer
              description: The amount of time in minutes to block out after each appointment, useful for cleanup or preparation.
              example: 15
            slotIncrementMinutes:
              type: integer
              description: |
                Controls the start times of available slots. For example, a value of 30 means slots can start on the hour or half-hour (e.g., 9:00, 9:30, 10:00).
              example: 30
            mode:
              type: string
              enum: ["all_available"]
              description: The mode for calculating availability.
              example: "all_available"
            specificAvailability:
              type: array
              description: A list of specific date and time overrides for the service's schedule (e.g., holidays, special events).
              items:
                $ref: '#/components/schemas/SpecificAvailabilityConstraint'
            regularAvailability:
              type: array
              description: The recurring weekly schedule for when this service is offered.
              items:
                $ref: '#/components/schemas/RegularAvailabilityConstraint'
        serviceType:
          type: string
          enum:
            - one_to_one
            - group
          description: |
            Defines the type of service.
            - `one_to_one`: A standard appointment with one customer.
            - `group`: An appointment or class that can have multiple attendees in the same time slot.
          example: "one_to_one"
        maxAttendeesPerSlot:
          type: integer
          description: For 'group' services, this defines the maximum number of bookings for a single time slot.
          example: 8
        description:
          type: string
          description: A detailed, public-facing description of the service.
          example: "A comprehensive business consultation to review your strategy, operations, and growth plans."
        imageUrl:
          type: string
          format: uri
          description: A URL for an image representing the service.
          example: "https://example.com/images/consultation.jpg"
        assetId:
          type: string
          format: uuid
          description: If this service requires a specific asset (like a room or machine), provide its unique identifier here.
          example: "550e8400-e29b-41d4-a716-446655440004"
        resourceIds:
          type: array
          description: A list of all employee resources who are qualified to provide this service.
          items:
            type: string
            format: uuid
          example: ["550e8400-e29b-41d4-a716-446655440001", "550e8400-e29b-41d4-a716-446655440002"]
        location:
          $ref: '#/components/schemas/Location'
        categories:
          type: array
          description: A list of categories for organizing services.
          items:
            type: string
          example: ["Consulting", "Business"]
        tags:
          type: array
          description: A list of searchable keywords or tags related to the service.
          items:
            type: string
          example: ["strategy", "planning", "growth"]
        price:
          type: object
          description: Pricing information for the service.
          properties:
            amount:
              type: number
              description: The base price.
              example: 150.00
            currency:
              type: string
              description: The currency code (ISO 4217).
              example: "USD"
            taxes:
              type: array
              description: A list of applicable taxes.
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "Sales Tax"
                  rate:
                    type: number
                    description: The tax rate as a decimal (e.g., 0.08 for 8%).
                    example: 0.08
                  included:
                    type: boolean
                    description: Indicates if the tax is already included in the base amount.
                    example: false
        customerFields:
          type: object
          description: Define the custom fields you need to collect from customers when they book this service.
          additionalProperties:
            $ref: '#/components/schemas/CustomerField'
          example:
            company:
              label: "Company Name"
              type: "text"
              required: true
            industry:
              label: "Industry"
              type: "select"
              required: false
              options: ["Technology", "Healthcare", "Finance", "Other"]
      example:
        id: "550e8400-e29b-41d4-a716-446655440003"
        name: "60-Minute Business Consultation"
        orgId: "550e8400-e29b-41d4-a716-446655440000"
        status: "active"
        timezone: "America/New_York"
        serviceType: "one_to_one"
        description: "A comprehensive business consultation to review your strategy, operations, and growth plans."
        resourceIds: ["550e8400-e29b-41d4-a716-446655440001"]
        availability:
          daysIntoFuture: 30
          lengthMinutes: 60
          bufferMinutes: 15
          slotIncrementMinutes: 30
          mode: "all_available"
        price:
          amount: 150.00
          currency: "USD"
    Location:
      type: object
      properties:
        lat:
          type: number
        lon:
          type: number
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
            postalCode:
              type: string
    SpecificAvailabilityConstraint:
      type: object
      description: Use this to override the regular weekly schedule for a specific date or time range, such as for holidays, vacations, or special events.
      properties:
        start:
          type: string
          format: date-time
          description: The beginning of the override period.
          example: "2025-12-25T00:00:00Z"
        end:
          type: string
          format: date-time
          description: The end of the override period.
          example: "2025-12-26T00:00:00Z"
        type:
          type: string
          enum: ["available", "unavailable"]
          description: |
            Defines the nature of the override.
            - `available`: Marks a time period as available, even if it falls on a day that is normally off.
            - `unavailable`: Blocks out a time period, making it impossible to book.
          example: "unavailable"
      example:
        start: "2025-12-25T00:00:00Z"
        end: "2025-12-26T00:00:00Z"
        type: "unavailable"
    RegularAvailabilityConstraint:
      type: object
      description: Defines a recurring time block within a standard week.
      properties:
        day:
          type: string
          enum: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          description: The day of the week for this rule.
          example: "monday"
        start:
          type: string
          pattern: "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"
          description: The start time in 24-hour HH:MM format.
          example: "09:00"
        end:
          type: string
          pattern: "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"
          description: The end time in 24-hour HH:MM format.
          example: "17:00"
        type:
          type: string
          enum: ["available", "unavailable"]
          description: |
            Defines whether the resource is bookable during this time.
            - `available`: The resource can be booked.
            - `unavailable`: The resource cannot be booked (e.g., a lunch break).
          example: "available"
      example:
        day: "monday"
        start: "09:00"
        end: "17:00"
        type: "available"
    CustomerField:
      type: object
      properties:
        label:
          type: string
        type:
          type: string
          enum:
            - text
            - email
            - phone
            - textarea
            - number
            - date
            - checkbox
            - select
        required:
          type: boolean
        prefilled:
          type: string
        readonly:
          type: boolean
        options:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      description: A standardized error response format.
      properties:
        message:
          type: string
          description: A clear, human-readable summary of the error.
          example: "Validation failed"
        error:
          type: string
          description: A short, machine-readable error code.
          example: "INVALID_INPUT"
        errors:
          type: array
          items:
            type: string
          description: A list of specific validation errors, if applicable.
          example: ["'startTime' is required", "'endTime' must be after 'startTime'"]
      example:
        message: "Validation failed"
        error: "INVALID_INPUT"
        errors: ["'startTime' is required", "'endTime' must be after 'startTime'"]
    BookingResponse:
      type: object
      properties:
        booking:
          $ref: '#/components/schemas/Booking'
    BookingsResponse:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    ServiceResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Service'
    ServicesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        orgId:
          type: string
    AllResourcesResponse:
      type: object
      properties:
        employees:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeResource'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetResource'
    UpdateEmployeeResourceResponse:
      type: object
      properties:
        updatedResource:
          $ref: '#/components/schemas/EmployeeResource'
    UpdateAssetResourceResponse:
      type: object
      properties:
        updatedResource:
          $ref: '#/components/schemas/AssetResource'
    HealthCheckResponse:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        endpoints:
          type: object
tags:
  - name: Resources
    description: |
      Manage the core bookable entities in your system. Resources can be employees (staff, consultants) or assets (rooms, equipment). Every resource has its own availability schedule, which is critical for calculating open appointment slots.
  - name: Services
    description: |
      Manage the specific, bookable offerings you provide to customers. A service ties together resources, duration, pricing, and custom booking rules into a single package.
  - name: Availability
    description: |
      Access the core scheduling engine to find open time slots. This endpoint calculates real-time availability by cross-referencing service rules, resource schedules, and existing bookings.
  - name: Bookings
    description: |
      Manage the entire lifecycle of an appointment. Use these endpoints to create, retrieve, update, cancel, and confirm bookings.
  - name: Public
    description: |
      Use these unauthenticated endpoints for your customer-facing integrations, like embedding a booking widget on your website. They provide a safe way to expose service lists and availability without requiring an API key.
paths:
  /all-resources:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Retrieve All Resources
      description: |
        Fetch a complete list of all resources—both employees and assets—within your organization.

        ## Overview
        This endpoint gives you a comprehensive view of every bookable entity you have configured. It's the perfect tool for building internal dashboards, populating selection menus, or getting a high-level overview of your entire operation. The response is conveniently separated into two lists: `employees` and `assets`.

        ### Use Cases
        - **Building Dashboards**: Display a complete list of all staff and equipment in a single view.
        - **Service Configuration**: Populate a UI where admins can assign resources to a new service.
        - **Reporting**: Gather data on all resources to analyze utilization and capacity.

        ### Response Details
        The endpoint returns two main arrays:
        - **`employees`**: Contains all your staff members, including their contact information, schedules, and roles.
        - **`assets`**: Contains all your physical resources, like meeting rooms or equipment, along with their availability rules.
      operationId: getAllResources
      responses:
        '200':
          description: |
            A successful response containing lists of all employee and asset resources in the organization.
          content:
            application/json:
              schema:
                type: object
                properties:
                  employees:
                    type: array
                    description: A list of all employee resources (e.g., staff, consultants).
                    items:
                      $ref: '#/components/schemas/EmployeeResource'
                  assets:
                    type: array
                    description: A list of all asset resources (e.g., rooms, equipment).
                    items:
                      $ref: '#/components/schemas/AssetResource'
              example:
                employees:
                  - id: "550e8400-e29b-41d4-a716-446655440001"
                    resourceName: "Dr. Sarah Johnson"
                    email: "sarah.johnson@example.com"
                    timezone: "America/New_York"
                    isActive: true
                    regularAvailability:
                      - day: "monday"
                        start: "09:00"
                        end: "17:00"
                        type: "available"
                assets:
                  - id: "550e8400-e29b-41d4-a716-446655440002"
                    resourceName: "Conference Room A"
                    assetType: "meeting_room"
                    timezone: "America/New_York"
                    isActive: true
                    regularAvailability:
                      - day: "monday"
                        start: "08:00"
                        end: "18:00"
                        type: "available"
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employee-resources:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Create an Employee Resource
      description: |
        Add a new employee to your organization. An employee is a person (like a staff member or consultant) who can be assigned to services and booked by customers.

        ## Key Information
        When creating an employee, you must define their core details and, most importantly, their availability.
        - **`resourceName`**: The employee's full name.
        - **`email`**: The employee's email, used for notifications.
        - **`timezone`**: The employee's local timezone to ensure accurate scheduling.
        - **`regularAvailability`**: The recurring weekly schedule defining their working hours.
        - **`bufferTime`**: Optional time in minutes to add between their bookings.

        ## Availability Setup
        Define the employee's working hours using the `regularAvailability` array. Each entry represents a block of time on a specific day. For example, to set working hours from 9 AM to 5 PM on weekdays, you would add an entry for each day from Monday to Friday. You can also add "unavailable" blocks for things like lunch breaks.
      operationId: createEmployeeResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeResource'
            example:
              resourceName: "Dr. Greg House"
              email: "greg.house@example.com"
              phone: "+1-555-123-4567"
              timezone: "America/New_York"
              isActive: true
              notificationsEnabled: true
              bufferTime: 15
              regularAvailability:
                - day: "monday"
                  start: "09:00"
                  end: "17:00"
                  type: "available"
                - day: "tuesday"
                  start: "09:00"
                  end: "17:00"
                  type: "available"
              note: "Specialist in diagnostic medicine."
      responses:
        '201':
          description: The employee resource was created successfully. The response contains the full object for the newly created employee, including their unique system-generated ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResource'
        '400':
          description: Bad Request. The request body is missing required fields or contains invalid data. Check the `errors` array in the response for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Retrieve All Employee Resources
      description: Fetches a list of all employee resources configured for your organization. This is useful for managing staff or populating a list of employees in your application's UI.
      operationId: getEmployeeResources
      responses:
        '200':
          description: A successful response containing a list of all employee resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeResource'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employee-resources/{resourceId}:
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Update an Employee Resource
      description: |
        Update the details of an existing employee resource by providing their unique ID.

        You can modify any property of the employee, including their name, contact information, and availability schedule. To update the resource, send the complete resource object in the request body with the desired changes. The system will replace the existing configuration with the new one you provide.
      operationId: updateEmployeeResource
      parameters:
        - name: resourceId
          in: path
          required: true
          description: The unique identifier of the employee resource to update.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeResource'
      responses:
        '200':
          description: The employee was updated successfully. The response contains the complete, updated resource object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmployeeResourceResponse'
        '400':
          description: Bad Request. The request body contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. An employee with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Delete an Employee Resource
      description: Permanently remove an employee resource from your organization. This action cannot be undone. Deleting a resource will unassign them from all services. Existing bookings will remain but new bookings for this resource will not be possible.
      operationId: deleteEmployeeResource
      parameters:
        - name: resourceId
          in: path
          required: true
          description: The unique identifier of the employee resource to delete.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The employee resource was successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Employee resource deleted successfully."
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. An employee with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /asset-resources:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Create an Asset Resource
      description: |
        Add a new asset to your organization. An asset is a bookable resource that is not a person, such as a meeting room, a piece of equipment, or a vehicle.

        ## Key Information
        Similar to employees, assets require a name, timezone, and a defined availability schedule.
        - **`resourceName`**: A descriptive name for the asset (e.g., "Main Conference Room").
        - **`assetType`**: A category for the asset (e.g., "meeting_room").
        - **`timezone`**: The asset's local timezone.
        - **`regularAvailability`**: The recurring weekly schedule defining when the asset is available for booking.
      operationId: createAssetResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetResource'
      responses:
        '201':
          description: The asset resource was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResource'
        '400':
          description: Bad Request. The request body is missing required fields or contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Retrieve All Asset Resources
      description: Fetches a list of all asset resources configured for your organization. This is useful for managing rooms, equipment, or other bookable assets.
      operationId: getAssetResources
      responses:
        '200':
          description: A successful response containing a list of all asset resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetResource'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /asset-resources/{resourceId}:
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Update an Asset Resource
      description: |
        Update the details of an existing asset resource by providing its unique ID.

        You can modify any property, such as its name or availability schedule. Send the complete resource object in the request body with the desired changes, and the system will replace the existing configuration.
      operationId: updateAssetResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the asset resource to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetResource'
      responses:
        '200':
          description: The asset was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAssetResourceResponse'
        '400':
          description: Bad Request. The request body contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. An asset with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Resources
      summary: Delete an Asset Resource
      description: Permanently remove an asset resource from your organization. This action cannot be undone and will unassign the asset from any services it is linked to.
      operationId: deleteAssetResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the asset resource to delete.
      responses:
        '200':
          description: The asset resource was successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Asset resource deleted successfully."
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. An asset with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /services:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Services
      summary: Create a Service
      description: |
        Create a new service that your customers can book. A service is the core offering that defines the "what" of an appointment.

        ## What is a Service?
        A service bundles together several key pieces of information:
        - **Name & Description**: What is the service called and what does it entail?
        - **Duration**: How long is the appointment (`lengthMinutes`)?
        - **Resources**: Which employees or assets are required to perform this service (`resourceIds`)?
        - **Availability Rules**: When is this service offered? This can be its own schedule or inherit from the assigned resources.
        - **Price**: How much does it cost?
        - **Customer Information**: What questions do you need to ask the customer at the time of booking (`customerFields`)?

        Creating a well-defined service is the first step to enabling online bookings.
      operationId: createService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: The service was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Bad Request. The request body is missing required fields or contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Services
      summary: Retrieve All Services
      description: |
        Fetch a list of all services configured within your organization. This includes both active and inactive services.

        Use this endpoint to get a complete catalog of your offerings. This is essential for building a service selection menu for your customers or for internal management dashboards.
      operationId: getServices
      responses:
        '200':
          description: A successful response containing a list of all services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /services/{id}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Services
      summary: Retrieve a Specific Service
      description: Fetch the complete details for a single service by providing its unique identifier. This is useful when you need to display details about a specific service or load its configuration for an update form.
      operationId: getServiceById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the service to retrieve.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response containing the requested service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A service with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Services
      summary: Update a Service
      description: |
        Update the configuration of an existing service.

        You can change any aspect of the service, such as its name, duration, price, or the resources assigned to it. To perform an update, provide the complete service object in the request body with the new values. Any fields you omit may be reset to their default values, so it's best to fetch the service first, modify the object, and then send it back.
      operationId: updateService
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the service to update.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: The service was updated successfully. The response contains the full, updated service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Bad Request. The request body contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A service with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Services
      summary: Delete a Service
      description: Permanently remove a service from your organization. This action cannot be undone. Deleting a service will prevent any new bookings for it.
      operationId: deleteService
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the service to delete.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The service was successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service deleted successfully."
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A service with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /availability:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Availability
      summary: Check Service Availability
      description: |
        Calculate and retrieve a list of available time slots for a specific service within a given time range. This is the core endpoint for powering any booking interface.

        ## How It Works
        The availability engine performs a complex calculation in real-time:
        1. It identifies all resources (employees and assets) assigned to the requested `serviceId`.
        2. It considers the regular weekly schedules and specific date overrides for both the service and each assigned resource.
        3. It removes any time slots that are already taken by existing bookings.
        4. It accounts for any buffer time required before or after each appointment.
        5. It generates a list of valid start times for new appointments based on the service's duration and slot increment rules.

        The result is a precise list of slots that are genuinely available for booking.
      operationId: getAvailableSlots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRequest'
      responses:
        '200':
          description: A successful response containing a list of available time slots. If the list is empty, no slots were found matching the criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityResponse'
        '400':
          description: Bad Request. The request body is invalid (e.g., endTime is before startTime).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookings:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Create a Booking
      description: |
        Create a new booking for a customer. This endpoint performs a final availability check before reserving the time slot.

        ## Booking Methods
        You can create a booking in two ways:
        1.  **By Service (`serviceId`)**: This is the standard method. You provide a `serviceId` and the system automatically assigns an available resource.
        2.  **By Resource (`resourceIds`)**: Use this method to book a specific employee or asset directly. This bypasses service-based assignment.

        ## Process Flow
        1. The system validates that the requested `startTime` and `endTime` form an available slot.
        2. It checks that all required `customerData` fields (as defined by the service) are provided.
        3. If valid, it creates the booking with a `CONFIRMED` status (unless the service requires manual approval, in which case it will be `PENDING`).
        4. The resource's schedule is updated to block off the reserved time.
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: The booking was created successfully. The response contains the full booking object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad Request. The requested time slot is not available, or the request body is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Retrieve Bookings
      description: |
        Fetch a list of bookings for your organization. You can filter the results by providing a `startTime` and `endTime` in the query parameters to get all bookings within that specific date range. If no parameters are provided, it may return all upcoming bookings.
      operationId: getBookingsByDateRange
      parameters:
        - name: startTime
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: The beginning of the date range to filter bookings.
        - name: endTime
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: The end of the date range to filter bookings.
      responses:
        '200':
          description: A successful response containing a list of bookings that match the filter criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsResponse'
        '400':
          description: Bad Request. The date range parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookings/{bookingId}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Retrieve a Specific Booking
      description: Fetch the complete details for a single booking by providing its unique identifier.
      operationId: getBookingById
      parameters:
        - name: bookingId
          in: path
          required: true
          description: The unique identifier of the booking to retrieve.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response containing the requested booking object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A booking with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Update a Booking
      description: |
        Update the details of an existing booking. This endpoint is commonly used for rescheduling.

        To reschedule, provide a new `startTime` and `endTime` in the request body. The system will validate that the new time slot is available before applying the change. You can also update other details like the booking `note` or `customerData`.
      operationId: updateBooking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the booking to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '200':
          description: The booking was updated successfully. The response contains the full, updated booking object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad Request. The new time slot is not available or the request body is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A booking with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Delete a Booking
      description: Permanently remove a booking from the system. This action cannot be undone. If you wish to cancel a booking but keep a record of it, use the `PATCH /bookings/{bookingId}/cancel` endpoint instead.
      operationId: deleteBooking
      parameters:
        - name: bookingId
          in: path
          required: true
          description: The unique identifier of the booking to delete.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The booking was successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Booking deleted successfully."
  /bookings/{bookingId}/cancel:
    patch:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Cancel a Booking
      description: |
        Cancel an existing booking. This action changes the booking's status to `CANCELLED` and frees up the time slot, making the resource available for other bookings.

        This is the recommended way to handle cancellations, as it preserves a record of the original appointment for historical purposes. You can only cancel bookings that are currently in `PENDING` or `CONFIRMED` status.
      operationId: cancelBooking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the booking to cancel.
      responses:
        '200':
          description: The booking was successfully cancelled. The response contains the updated booking object with the new 'CANCELLED' status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Booking cancelled successfully."
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Bad Request. The booking cannot be cancelled (e.g., it is already completed or cancelled).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A booking with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookings/{bookingId}/confirm:
    patch:
      security:
        - ApiKeyAuth: []
      tags:
        - Bookings
      summary: Confirm a Booking
      description: |
        Confirm a booking that is in the `PENDING` status. This action changes its status to `CONFIRMED`.

        This endpoint is only used when a service is configured to require manual approval for new bookings. Most services create bookings as `CONFIRMED` by default, making this step unnecessary.
      operationId: confirmBooking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the booking to confirm.
      responses:
        '200':
          description: The booking was successfully confirmed. The response contains the updated booking object with the new 'CONFIRMED' status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Booking confirmed successfully."
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Bad Request. The booking is not in a 'PENDING' state and cannot be confirmed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. Your API key is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. A booking with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/services:
    get:
      tags:
        - Public
      summary: Retrieve Public Services for an Organization
      description: |
        Fetch a list of all `active` services for a specific organization. This endpoint is public and does not require authentication.

        It is designed for use in customer-facing applications, such as a booking widget on your website, where you need to display a list of available services to a potential customer. You must provide the organization's unique ID (`orgId`) as a query parameter.
      operationId: getServicesByOrgId
      security: []
      parameters:
        - name: orgId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier for the organization whose services you want to retrieve.
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: A successful response containing a list of the organization's active services.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '404':
          description: Not Found. An organization with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/services/{serviceId}:
    get:
      tags:
        - Public
      summary: Retrieve a Public Service by ID
      description: Fetches the details of a specific, publicly available service. This endpoint does not require authentication and is intended for customer-facing applications. You must provide both the `serviceId` and the `orgId`.
      operationId: getServiceByIdPublic
      security: []
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the service to retrieve.
        - name: orgId
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier of the organization.
      responses:
        '200':
          description: A successful response containing the requested service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '404':
          description: Not Found. The specified service or organization does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/availability:
    post:
      tags:
        - Public
      summary: Check Public Service Availability
      description: |
        Calculate and retrieve available time slots for a service without requiring authentication. This public endpoint is ideal for embedding a real-time availability calendar in your website or application.

        It functions identically to the authenticated availability endpoint but requires the `orgId` to be specified in the query.
      operationId: getAvailableSlotsPublic
      security: []
      parameters:
        - name: orgId
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier of the organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicAvailabilityRequest'
      responses:
        '200':
          description: A successful response containing a list of available time slots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAvailabilityResponse'
        '400':
          description: Bad Request. The request body is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/bookings:
    post:
      tags:
        - Public
      summary: Create a Public Booking
      description: |
        Create a new booking without requiring authentication. This public endpoint is the final step in a customer-facing booking flow, allowing a user to reserve a time slot they found using the public availability endpoint.

        The system performs the same rigorous validation as the authenticated endpoint to prevent double-bookings.
      operationId: createBookingPublic
      security: []
      parameters:
        - name: orgId
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier of the organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: The booking was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad Request. The time slot is no longer available or the request body is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/health:
    get:
      tags:
        - Public
      summary: Health Check
      description: |
        Check the operational status of the API. This endpoint can be used for monitoring and uptime checks. It does not require authentication and provides a simple success message with a timestamp if the API is healthy.
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: The API is operational.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'